// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLDK;

#nullable disable

namespace NLDK.Migrations
{
    [DbContext(typeof(WalletContext))]
    [Migration("20231219132313_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("NLDK.ArbitraryData", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("WalletId")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.HasIndex("WalletId");

                    b.ToTable("ArbitraryData");
                });

            modelBuilder.Entity("NLDK.Channel", b =>
                {
                    b.Property<string>("WalletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FundingTransactionHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundingTransactionOutputIndex")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("SpendableData")
                        .HasColumnType("BLOB");

                    b.HasKey("WalletId", "FundingTransactionHash", "FundingTransactionOutputIndex");

                    b.HasIndex("FundingTransactionHash", "FundingTransactionOutputIndex");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("NLDK.Coin", b =>
                {
                    b.Property<string>("FundingTransactionHash")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundingTransactionOutputIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpendingTransactionHash")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpendingTransactionInputIndex")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("FundingTransactionHash", "FundingTransactionOutputIndex");

                    b.HasIndex("ScriptId");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("NLDK.LightningPayment", b =>
                {
                    b.Property<string>("WalletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentHash")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Inbound")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Preimage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<long>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("WalletId", "PaymentHash", "Inbound", "PaymentId");

                    b.ToTable("LightningPayments");
                });

            modelBuilder.Entity("NLDK.Script", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("NLDK.Transaction", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<string>("BlockHash")
                        .HasColumnType("TEXT");

                    b.HasKey("Hash");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("NLDK.TransactionScript", b =>
                {
                    b.Property<string>("ScriptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Spent")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScriptId", "TransactionHash");

                    b.HasIndex("TransactionHash");

                    b.ToTable("TransactionScripts");
                });

            modelBuilder.Entity("NLDK.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AliasWalletName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationBlockHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivationPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LastDerivationIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mnemonic")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("NLDK.WalletScript", b =>
                {
                    b.Property<string>("WalletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DerivationPath")
                        .HasColumnType("TEXT");

                    b.HasKey("WalletId", "ScriptId");

                    b.HasIndex("ScriptId");

                    b.ToTable("WalletScripts");
                });

            modelBuilder.Entity("NLDK.ArbitraryData", b =>
                {
                    b.HasOne("NLDK.Wallet", "Wallet")
                        .WithMany("ArbitraryDatas")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("NLDK.Channel", b =>
                {
                    b.HasOne("NLDK.Wallet", "Wallet")
                        .WithMany("Channels")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLDK.Coin", "Coin")
                        .WithMany("Channels")
                        .HasForeignKey("FundingTransactionHash", "FundingTransactionOutputIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coin");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("NLDK.Coin", b =>
                {
                    b.HasOne("NLDK.Script", "Script")
                        .WithMany("Coins")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");
                });

            modelBuilder.Entity("NLDK.LightningPayment", b =>
                {
                    b.HasOne("NLDK.Wallet", "Wallet")
                        .WithMany("LightningPayments")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("NLDK.TransactionScript", b =>
                {
                    b.HasOne("NLDK.Script", "Script")
                        .WithMany("TransactionScripts")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLDK.Transaction", "Transaction")
                        .WithMany("TransactionScripts")
                        .HasForeignKey("TransactionHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("NLDK.WalletScript", b =>
                {
                    b.HasOne("NLDK.Script", "Script")
                        .WithMany("WalletScripts")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLDK.Wallet", "Wallet")
                        .WithMany("Scripts")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Script");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("NLDK.Coin", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("NLDK.Script", b =>
                {
                    b.Navigation("Coins");

                    b.Navigation("TransactionScripts");

                    b.Navigation("WalletScripts");
                });

            modelBuilder.Entity("NLDK.Transaction", b =>
                {
                    b.Navigation("TransactionScripts");
                });

            modelBuilder.Entity("NLDK.Wallet", b =>
                {
                    b.Navigation("ArbitraryDatas");

                    b.Navigation("Channels");

                    b.Navigation("LightningPayments");

                    b.Navigation("Scripts");
                });
#pragma warning restore 612, 618
        }
    }
}
