@page "/wallets/{walletId}"
@using NLDK
@using Newtonsoft.Json
@using Script = NBitcoin.Script
@using NBitcoin
@using NBXplorer
@using nldksample.LDK
@using org.ldk.structs
@using org.ldk.util
@using Coin = NLDK.Coin
@using NodeInfo = BTCPayServer.Lightning.NodeInfo
@using TxOut = NBitcoin.TxOut
@using UInt128 = org.ldk.util.UInt128
@inject WalletService WalletService
@inject Network Network
@inject ExplorerClient ExplorerClient
@inject LDKNodeManager NodeManager
@implements IDisposable
<PageTitle>Home</PageTitle>
@if (WalletData is null)
{
    <p>loading</p>
}
else
{
    <div class="d-flex"> <h3>Wallet @WalletData.Name</h3> <a href="/wallets/@WalletId/logs">Logs</a></div>

    <span>Total balance: @Balance</span>
    <ul>
        @foreach (var s in WalletData.Scripts)
        {
            var totalReceived = s.Script.Coins.Sum(coin => coin.Value);
            var totalSpent = s.Script.Coins.Where(coin => coin.SpendingTransactionHash is not null).Sum(coin => coin.Value);
            <li>
                <input type="text" readonly="readonly" value="@Script.FromHex(s.ScriptId).GetDestinationAddress(Network)"/>
                @if (s.DerivationPath is null)
                {
                    <span>UNSPENDABLE!</span>
                }
                @s.Script.Coins.Count coins, balance:@(totalReceived - totalSpent) , total rec: @totalReceived, total sent: @totalSpent
            </li>
        }
    </ul>
    <button class="btn-primary" @onclick="Derive">Derive new address</button>

    <h4 class="mt-4">Send</h4>
    <input type="number" @bind="SendValue" step="any" min="0.0000001" max="@Balance" placeholder="send amt"/>
    <input type="text" @bind="SendDest"/>
    <button @onclick="Send">Send</button>

    @if (_node is not null)
    {
        <h4 class="mt-4">Node Info</h4>
        if (_node.NodeInfo is not null)
        {
            <div>@_node.NodeInfo.ToString()</div>
        }
        else
        {
            <div>@_node.NodeId.ToString()</div>
        }

        <h4 class="mt-4">Peers</h4>
        @if (_peers?.Any() is true)
        {
            <ul>
                @foreach (var peer in _peers)
                {
                    <li>
                        @peer
                        <ul>
                            <li>peer channels</li>
                            @foreach (var channel in _channels?.Where(details => new PubKey(details.get_counterparty().get_node_id()) == peer.NodeId ))
                            {
                                var id = channel.get_channel_id();
                                <li>
                                    @Convert.ToHexString(id)
                                    <br/>
                                    usable: @channel.get_is_usable()
                                    <button @onclick="() => CloseChannel(channel, false)">Close </button>
                                    <button @onclick="() => CloseChannel(channel, true)">Force Close </button>
                                </li>

                            }
                            <li>Open channel
                                <input type="number" @bind="OpenChannelAmt" max="@Balance"/>
                                <button @onclick="() => OpenChannel(peer.NodeId, OpenChannelAmt)">
                                    Open channel
                                </button>
                            </li>
                        </ul>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No peers yet</p>
        }
        <input type="text" @bind="ConnectPeer"/>
        <button @onclick="ConnectToPeer">Connect to peer</button>

        <h4 class="mt-4">Channels</h4>
        @if (_channels?.Any() is true)
        {
            <ul>
                @foreach (var channel in _channels)
                {
                    var id = channel.get_channel_id();
                    <li>
                        @Convert.ToHexString(id)
                        <br/>
                        usable: @channel.get_is_usable()
                        <button @onclick="() => CloseChannel(channel, false)">Close </button>
                        <button @onclick="() => CloseChannel(channel, true)">Force Close </button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No channels yet</p>
        }
    }

    <h4 class="mt-4">Raw wallet data</h4>
    <pre>@JsonConvert.SerializeObject(WalletData, Formatting.Indented, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore })</pre>
}

@code {
    private LDKNode? _node;
    private LDKPeerHandler _peerManager;
    private ChannelManager _channelManager;
    private List<NodeInfo> _peers;
    private List<ChannelDetails> _channels;

    private decimal Balance
    {
        get { return UnspentCoins?.Sum(coin => coin.Value) ?? 0; }
    }

    public async Task OpenChannel(PubKey nodeId, decimal amt)
    {
        var userConfig = _node.ServiceProvider.GetRequiredService<UserConfig>();
        _node.ServiceProvider.GetRequiredService<LDKWalletLogger>().LogInformation($"Attempt to open channel of {amt} to {nodeId}");

        var result = _channelManager.create_channel(nodeId.ToBytes(), Money.Coins(amt).Satoshi, 0, new UInt128(RandomUtils.GetBytes(16)), Option_ThirtyTwoBytesZ.none(), userConfig);
        if (result is Result_ThirtyTwoBytesAPIErrorZ.Result_ThirtyTwoBytesAPIErrorZ_Err err)
        {
            _node.ServiceProvider.GetRequiredService<LDKWalletLogger>().LogError($"Could not create channel because: { err.err.GetError()}");
        }
        else if (result is Result_ThirtyTwoBytesAPIErrorZ.Result_ThirtyTwoBytesAPIErrorZ_OK ok)
        {
            _node.ServiceProvider.GetRequiredService<LDKWalletLogger>().LogInformation($"Channel created with id {Convert.ToHexString(ok.res)}");
        }
    }

    private IEnumerable<Coin>? UnspentCoins => WalletData?.Scripts.Where(walletScript => walletScript.DerivationPath is not null).SelectMany(script => script.Script.Coins).Where(coin => coin.SpendingTransactionHash is null);

    [Parameter]
    public string WalletId { get; set; }

    private NLDK.Wallet? WalletData { get; set; }
    private decimal SendValue { get; set; }
    private string? SendDest { get; set; }
    private string? ConnectPeer { get; set; }
    private decimal OpenChannelAmt { get; set; }

    protected override Task OnParametersSetAsync()
    {
        _node = null;
        _peerManager = null;
        _peers = null;
        _channelManager = null;
        _channels = null;
        SendValue = 0;
        SendDest = null;
        ConnectPeer = null;
        OpenChannelAmt = 0;
        try
        {
            if (_peerManager != null) _peerManager.OnPeersChange -= PeerManagerOnOnPeersChange;
        }
        catch (Exception e)
        {
        }
        _ = Fetch();

        try
        {
            if (_peerManager != null) _peerManager.OnPeersChange -= PeerManagerOnOnPeersChange;
        }
        catch (Exception e)
        {
        }
        return base.OnParametersSetAsync();
    }

    private async Task Fetch()
    {
        await WalletService.Get(WalletId).ContinueWith(async task =>
        {
            WalletData = task.Result;
            _node = await NodeManager.GetLDKNodeForWallet(WalletData);

            if (_node is not null)
            {
                _peerManager = _node.ServiceProvider.GetRequiredService<LDKPeerHandler>();
                _peers = await _peerManager.GetPeerNodeIds();
                _peerManager.OnPeersChange += PeerManagerOnOnPeersChange;
                _channelManager = _node.ServiceProvider.GetRequiredService<ChannelManager>();
                _channels = _channelManager.list_channels().ToList();
            }
            await InvokeAsync(StateHasChanged);
        });
    }

    private void PeerManagerOnOnPeersChange(object? sender, PeersChangedEventArgs e)
    {
        _peers = e.PeerNodeIds;
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task Derive()
    {
        await WalletService.DeriveScript(WalletId);
        await Fetch();
    }

    private async Task Send()
    {
        if (string.IsNullOrEmpty(SendDest))
        {
            return;
        }

        SendDest = SendDest.Trim();
        var addr = BitcoinAddress.Create(SendDest, ExplorerClient.Network.NBitcoinNetwork);
        var feeRate = await ExplorerClient.GetFeeRateAsync(1, new FeeRate(100m));
        var tx = await WalletService.CreateTransaction(WalletId, new List<TxOut>()
        {
            new TxOut(Money.Coins(SendValue), addr.ScriptPubKey)
        }, feeRate.FeeRate);
        await ExplorerClient.BroadcastAsync(tx.Value.Tx);
    }

    private async Task ConnectToPeer()
    {
        if (_node == null || string.IsNullOrEmpty(ConnectPeer) || !BTCPayServer.Lightning.NodeInfo.TryParse(ConnectPeer, out var nodeInfo))
        {
            return;
        }

        var peerHandler = _node.ServiceProvider.GetService<LDKPeerHandler>();
        _ = await peerHandler.ConnectAsync(nodeInfo, CancellationToken.None);
    }

    // private Task OpenChannel(PubKey pubKey,Money outboundLiquidity, bool publicChannel )
    // {
    //     var channelManager = _node.ServiceProvider.GetRequiredService<ChannelManager>();
    //     // channelManager.create_channel()
    // }
    //
    private Task CloseChannel(ChannelDetails channel, bool force)
    {
        var channelManager = _node.ServiceProvider.GetRequiredService<ChannelManager>();
        var nodeId = channel.get_counterparty().get_node_id();
        var channelId = channel.get_channel_id();
        var result = force ?
           channelManager.force_close_broadcasting_latest_txn(channelId, nodeId) :
           channelManager.close_channel(channelId, nodeId);

         if (result is Result_NoneAPIErrorZ.Result_NoneAPIErrorZ_Err error)
         {
             _node.ServiceProvider.GetRequiredService<LDKWalletLogger>().Log(LogLevel.Error, $"Error{(force? " force": "")} closing channel: {error.err.GetError()} ");
         }
         return Task.CompletedTask;
    }

    public void Dispose()
    {
        _peerManager.OnPeersChange -= PeerManagerOnOnPeersChange;

    }

}
